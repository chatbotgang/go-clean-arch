// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/chatbotgang/go-clean-architecture-template/internal/app/service/auth (interfaces: TraderRepository)

// Package automock is a generated GoMock package.
package automock

import (
	context "context"
	reflect "reflect"

	barter "github.com/chatbotgang/go-clean-architecture-template/internal/domain/barter"
	common "github.com/chatbotgang/go-clean-architecture-template/internal/domain/common"
	gomock "github.com/golang/mock/gomock"
)

// MockTraderRepository is a mock of TraderRepository interface.
type MockTraderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTraderRepositoryMockRecorder
}

// MockTraderRepositoryMockRecorder is the mock recorder for MockTraderRepository.
type MockTraderRepositoryMockRecorder struct {
	mock *MockTraderRepository
}

// NewMockTraderRepository creates a new mock instance.
func NewMockTraderRepository(ctrl *gomock.Controller) *MockTraderRepository {
	mock := &MockTraderRepository{ctrl: ctrl}
	mock.recorder = &MockTraderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraderRepository) EXPECT() *MockTraderRepositoryMockRecorder {
	return m.recorder
}

// CreateTrader mocks base method.
func (m *MockTraderRepository) CreateTrader(arg0 context.Context, arg1 barter.Trader) (*barter.Trader, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTrader", arg0, arg1)
	ret0, _ := ret[0].(*barter.Trader)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// CreateTrader indicates an expected call of CreateTrader.
func (mr *MockTraderRepositoryMockRecorder) CreateTrader(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTrader", reflect.TypeOf((*MockTraderRepository)(nil).CreateTrader), arg0, arg1)
}

// GetTraderByEmail mocks base method.
func (m *MockTraderRepository) GetTraderByEmail(arg0 context.Context, arg1 string) (*barter.Trader, common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTraderByEmail", arg0, arg1)
	ret0, _ := ret[0].(*barter.Trader)
	ret1, _ := ret[1].(common.Error)
	return ret0, ret1
}

// GetTraderByEmail indicates an expected call of GetTraderByEmail.
func (mr *MockTraderRepositoryMockRecorder) GetTraderByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTraderByEmail", reflect.TypeOf((*MockTraderRepository)(nil).GetTraderByEmail), arg0, arg1)
}
